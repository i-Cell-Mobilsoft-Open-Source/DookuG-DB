version: "3.8"

# run
# docker-compose -f <PATH>/etc/docker-compose/postgresql/docker-compose.liquibase.install.step-02.yml up --build --force-recreate
# 
# docker exec -it module-dookug-postgredb-step-02 /bin/bash
# This 2nd step is a complex one.
#    - the first service is used to install Postgres Partman (pg_partman) extension   for partitioning.
#    - the second service (2nd step) is used to create the schema level objects with Liquibase.
# details are in "liquibase-install-step-02.xml"
services:
  module-dookug-pg_tools-step-01B:
    #--------------
    #to install custom pg_partman extension of the project postgres DB 
    #--------------
    container_name: module-dookug-pg_tools-step-01B
    image: icellmobilsoft/db-base-pg_tools:${DBDWH_IMAGE_VERSION}
    environment:
      AUTO_INSTALL: postgresql
      INSTALL_URL_S1: jdbc:postgresql://module-dookug-postgredb:5432/postgres
      INSTALL_URL_S2: jdbc:postgresql://module-dookug-postgredb:5432/dookug_db
    # entrypoint: [ "bash", "-c", "ls changelog" ]  
    #--------------
  module-dookug-postgredb-step-02:
    container_name: module-dookug-postgredb-step-02
    image: icellmobilsoft/db-base-liquibase:${DBDWH_IMAGE_VERSION}
    volumes:
      # to find the files were copied in dockerfile
      - ./../../../liquibase/dookug:/home/icellmobilsoft/liquibase/changelog
      - ./../../../liquibase/common:/home/icellmobilsoft/liquibase/changelog/common
      # to access the liquibase-install-step-02
      - ./../../../etc/release/postgresql/defaults-step-02.properties:/home/icellmobilsoft/liquibase/postgresql/defaults-step-02.properties
      # to access the before-liquibase.sh
      - ./../../../etc/release/before-liquibase.sh:/home/icellmobilsoft/liquibase/bash/before-liquibase.sh  
    environment:
      AUTO_INSTALL: postgresql
      INSTALL_STEP: STEP_2
networks:
  default:
    external: true
    name: dookug-local-network
