<?xml version="1.0" encoding="UTF-8"?>

<!--
Copyright (C) 2025 i-Cell Mobilsoft Zrt.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

SPDX-License-Identifier: Apache-2.0
-->

<!DOCTYPE defaultProperties SYSTEM "common/params.dtd">
    <databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
    http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.3.xsd">

    <!-- include the default properties -->
    &propertiesAll;

    <changeSet id="0017" author="jozsef.holczer" labels="0.1.0">
        <comment>DKG-103-set template_part_content records.</comment>
        
            <!-- & → &amp; -->
            <!-- < → &lt; -->
            <!-- > → &gt; -->
            <!-- " → &quot; -->
            <!-- ' → &apos; -->
        <!-- Postgres 14 does not support MERGE INTO, so we have to simulate it. (Postgresql 15 has it.) -->
        <sql dbms="postgresql"
            endDelimiter=";"
            splitStatements="true"
            stripComments="true">
            INSERT INTO ${schema_name}.template_part_content (x__id, template_part_id, content, compressed, validity_start, validity_end, x__insdate, x__insuser, x__moddate, x__moduser, x__version)
                SELECT x__id, template_part_id, content, compressed, validity_start, validity_end, x__insdate, x__insuser, x__moddate, x__moduser, x__version
                  FROM (SELECT 'DEV_TEMPLATE_HANDLEBARS_MAIN'               as x__id,
                               'DEV_TEMPLATE_HANDLEBARS_MAIN'               as template_part_id,
                               'q^&lt;!DOCTYPE html&gt; &lt;html lang="hu-HU"&gt; &lt;head&gt; &lt;style type="text/css"&gt; body { font-family: Arial; font-size: 16px; color: #aec5dd; background-color: #050e30; } div.header,div.footer { width: 100%; border: 2px solid #aec5dd; text-align: center; vertical-align: middle; margin-bottom: 20px; font-weight: 900; } div.footer { position: fixed; bottom: 0; } table.age_of_persons { width: 50%; border: 2px solid #aec5dd; margin-left: auto; margin-right: auto; } table.age_of_persons td { background-color: #aec5dd; color: #050e30;; } table.age_of_persons th.title { border-bottom: 1px solid #aec5dd; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; {{&gt; DEV_TEMPLATE_HANDLEBARS_HEADER}} &lt;table class="age_of_persons"&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class="title" colspan="2"&gt;Age of persons&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Age&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; {{&gt; DEV_TEMPLATE_HANDLEBARS_ROW}} &lt;/tbody&gt; &lt;/table&gt; {{&gt; DEV_TEMPLATE_HANDLEBARS_FOOTER}} &lt;/body&gt; &lt;/html&gt;^'::bytea as content,
                               0                                            as compressed,
                               now()                                        as validity_start, 
                               NULLIF(NULL,NULL)::date                      as validity_end, 
                               now()                                        as x__insdate, 
                               'SYSTEM'                                     as x__insuser, 
                               NULLIF(NULL,NULL)::date                      as x__moddate, 
                               NULLIF(NULL,NULL)::text                      as x__moduser, 
                               1                                            as x__version
                       ) x                        
                ON CONFLICT(x__id)                
                    DO UPDATE
                        SET template_part_id = excluded.template_part_id, content = excluded.content, compressed = excluded.compressed, 
                        validity_start = excluded.validity_start,  validity_end = excluded.validity_end,  x__moddate = now(), x__moduser= 'SYSTEM', x__version = excluded.x__version + 1;
        </sql>
        <!-- ************************************************** -->    
        <sql dbms="postgresql"
            endDelimiter=";"
            splitStatements="true"
            stripComments="true">
            INSERT INTO ${schema_name}.template_part_content (x__id, template_part_id, content, compressed, validity_start, validity_end, x__insdate, x__insuser, x__moddate, x__moduser, x__version)
                SELECT x__id, template_part_id, content, compressed, validity_start, validity_end, x__insdate, x__insuser, x__moddate, x__moduser, x__version
                  FROM (SELECT 'DEV_TEMPLATE_HANDLEBARS_HEADER'               as x__id,
                               'DEV_TEMPLATE_HANDLEBARS_HEADER'               as template_part_id,
                               'q^&lt;div class="header"&gt;{{title}}&lt;/div&gt;^'::bytea as content,
                               0                                            as compressed,
                               now()                                        as validity_start, 
                               NULLIF(NULL,NULL)::date                      as validity_end, 
                               now()                                        as x__insdate, 
                               'SYSTEM'                                     as x__insuser, 
                               NULLIF(NULL,NULL)::date                      as x__moddate, 
                               NULLIF(NULL,NULL)::text                      as x__moduser, 
                               1                                            as x__version
                       ) x                        
                ON CONFLICT(x__id)                
                    DO UPDATE
                        SET template_part_id = excluded.template_part_id, content = excluded.content, compressed = excluded.compressed, 
                        validity_start = excluded.validity_start,  validity_end = excluded.validity_end,  x__moddate = now(), x__moduser= 'SYSTEM', x__version = excluded.x__version + 1;
        </sql>
        <!-- ************************************************** -->
        <sql dbms="postgresql"
            endDelimiter=";"
            splitStatements="true"
            stripComments="true">
            INSERT INTO ${schema_name}.template_part_content (x__id, template_part_id, content, compressed, validity_start, validity_end, x__insdate, x__insuser, x__moddate, x__moduser, x__version)
                SELECT x__id, template_part_id, content, compressed, validity_start, validity_end, x__insdate, x__insuser, x__moddate, x__moduser, x__version
                  FROM (SELECT 'DEV_TEMPLATE_HANDLEBARS_ROW'               as x__id,
                               'DEV_TEMPLATE_HANDLEBARS_ROW'               as template_part_id,
                               'q^{{#personList}}&lt;tr&gt;&lt;td&gt;{{name}}&lt;/td&gt;&lt;td&gt;{{age}}{{#if (equals age "0")}} (infant){{/if}}&lt;/td&gt;&lt;/tr&gt;{{/personList}}^'::bytea as content,
                               0                                            as compressed,
                               now()                                        as validity_start, 
                               NULLIF(NULL,NULL)::date                      as validity_end, 
                               now()                                        as x__insdate, 
                               'SYSTEM'                                     as x__insuser, 
                               NULLIF(NULL,NULL)::date                      as x__moddate, 
                               NULLIF(NULL,NULL)::text                      as x__moduser, 
                               1                                            as x__version
                       ) x                        
                ON CONFLICT(x__id)                
                    DO UPDATE
                        SET template_part_id = excluded.template_part_id, content = excluded.content, compressed = excluded.compressed, 
                        validity_start = excluded.validity_start,  validity_end = excluded.validity_end,  x__moddate = now(), x__moduser= 'SYSTEM', x__version = excluded.x__version + 1;
        </sql>
        <!-- ************************************************** -->
        <sql dbms="postgresql"
            endDelimiter=";"
            splitStatements="true"
            stripComments="true">
            INSERT INTO ${schema_name}.template_part_content (x__id, template_part_id, content, compressed, validity_start, validity_end, x__insdate, x__insuser, x__moddate, x__moduser, x__version)
                SELECT x__id, template_part_id, content, compressed, validity_start, validity_end, x__insdate, x__insuser, x__moddate, x__moduser, x__version
                  FROM (SELECT 'DEV_TEMPLATE_HANDLEBARS_FOOTER'               as x__id,
                               'DEV_TEMPLATE_HANDLEBARS_FOOTER'               as template_part_id,
                               'q^&lt;div class="footer"&gt;&#169; {{currentYear}}&lt;/div&gt;^'::bytea as content,
                               0                                            as compressed,
                               now()                                        as validity_start, 
                               NULLIF(NULL,NULL)::date                      as validity_end, 
                               now()                                        as x__insdate, 
                               'SYSTEM'                                     as x__insuser, 
                               NULLIF(NULL,NULL)::date                      as x__moddate, 
                               NULLIF(NULL,NULL)::text                      as x__moduser, 
                               1                                            as x__version
                       ) x                        
                ON CONFLICT(x__id)                
                    DO UPDATE
                        SET template_part_id = excluded.template_part_id, content = excluded.content, compressed = excluded.compressed, 
                        validity_start = excluded.validity_start,  validity_end = excluded.validity_end,  x__moddate = now(), x__moduser= 'SYSTEM', x__version = excluded.x__version + 1;
        </sql>
        <!-- ************************************************** -->
        <sql dbms="postgresql"
            endDelimiter=";"
            splitStatements="true"
            stripComments="true">
            INSERT INTO ${schema_name}.template_part_content (x__id, template_part_id, content, compressed, validity_start, validity_end, x__insdate, x__insuser, x__moddate, x__moduser, x__version)
                SELECT x__id, template_part_id, content, compressed, validity_start, validity_end, x__insdate, x__insuser, x__moddate, x__moduser, x__version
                  FROM (SELECT 'DEV_TEMPLATE_ERROR_MAIN'               as x__id,
                               'DEV_TEMPLATE_ERROR_MAIN'               as template_part_id,
                               'q&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;style&gt;html, body { width:180mm;height: 297mm;font-family: Arial;font-size: 10px;}table { page-break-inside:auto }tr{ page-break-inside:avoid; page-break-after:auto}thead{display:table-header-group }tfoot { display:table-footer-group }}table {  margin-bottom: 20px;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;table style="height: 161px; width: 100%; border-collapse: collapse;" border="0"&gt;&lt;tbody&gt;&lt;tr style="height: 161px;"&gt;&lt;td style="width: 161px;"&gt;'::bytea as content,
                               0                                            as compressed,
                               now()                                        as validity_start, 
                               NULLIF(NULL,NULL)::date                      as validity_end, 
                               now()                                        as x__insdate, 
                               'SYSTEM'                                     as x__insuser, 
                               NULLIF(NULL,NULL)::date                      as x__moddate, 
                               NULLIF(NULL,NULL)::text                      as x__moduser, 
                               1                                            as x__version
                       ) x                        
                ON CONFLICT(x__id)                
                    DO UPDATE
                        SET template_part_id = excluded.template_part_id, content = excluded.content, compressed = excluded.compressed, 
                        validity_start = excluded.validity_start,  validity_end = excluded.validity_end,  x__moddate = now(), x__moduser= 'SYSTEM', x__version = excluded.x__version + 1;
        </sql>
        <!-- ************************************************** -->
        <sql dbms="oracle"
            endDelimiter="/"
            splitStatements="true"
            stripComments="true">
            <!-- ****** -->
            DECLARE
                temp_blob BLOB := EMPTY_BLOB;            
            BEGIN            
                dbms_lob.createtemporary(temp_blob, TRUE);
                dbms_lob.open(temp_blob, dbms_lob.lob_readwrite);               
                dbms_lob.append(temp_blob, utl_raw.cast_to_raw(q&apos;^&lt;!DOCTYPE html&gt; &lt;html lang="hu-HU"&gt; &lt;head&gt; &lt;style type="text/css"&gt; body { font-family: Arial; font-size: 16px; color: #aec5dd; background-color: #050e30; } div.header,div.footer { width: 100%; border: 2px solid #aec5dd; text-align: center; vertical-align: middle; margin-bottom: 20px; font-weight: 900; } div.footer { position: fixed; bottom: 0; } table.age_of_persons { width: 50%; border: 2px solid #aec5dd; margin-left: auto; margin-right: auto; } table.age_of_persons td { background-color: #aec5dd; color: #050e30;; } table.age_of_persons th.title { border-bottom: 1px solid #aec5dd; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; {{&gt; DEV_TEMPLATE_HANDLEBARS_HEADER}} &lt;table class="age_of_persons"&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class="title" colspan="2"&gt;Age of persons&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Age&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; {{&gt; DEV_TEMPLATE_HANDLEBARS_ROW}} &lt;/tbody&gt; &lt;/table&gt; {{&gt; DEV_TEMPLATE_HANDLEBARS_FOOTER}} &lt;/body&gt; &lt;/html&gt;^&apos;));              
                
                dbms_lob.close(temp_blob);     
                
                MERGE INTO ${schema_name}.template_part_content t
                USING (SELECT 'DEV_TEMPLATE_HANDLEBARS_MAIN' as x__id, 
                        'DEV_TEMPLATE_HANDLEBARS_MAIN' as template_part_id, 
                        utl_compress.lz_compress(temp_blob) as content
                        FROM DUAL
                      ) x
                ON (t.x__id = x.x__id)
                WHEN MATCHED THEN
                    UPDATE SET t.template_part_id = x.template_part_id, t.content = x.content, t.compressed = 1, t.x__moddate = SYSDATE, t.x__moduser= 'SYSTEM',  
                        t.x__version = t.x__version + 1
                WHEN NOT MATCHED THEN
                    INSERT (x__id, template_part_id, content, compressed, validity_start, validity_end, x__insdate, x__insuser, x__moddate, x__moduser,                    x__version)                     
                    VALUES (x.x__id, x.template_part_id, x.content, 1, SYSDATE, null, SYSDATE, 'SYSTEM', NULL, NULL, 1);
            END;
            /
        </sql>
        <sql dbms="oracle"
            endDelimiter="/"
            splitStatements="true"
            stripComments="true">
            <!-- ****** -->
            DECLARE
                temp_blob BLOB := EMPTY_BLOB;            
            BEGIN            
                dbms_lob.createtemporary(temp_blob, TRUE);
                dbms_lob.open(temp_blob, dbms_lob.lob_readwrite);               
                dbms_lob.append(temp_blob, utl_raw.cast_to_raw(q&apos;^&lt;div class="header"&gt;{{title}}&lt;/div&gt;^&apos;));              
                
                dbms_lob.close(temp_blob);     
                
                MERGE INTO ${schema_name}.template_part_content t
                USING (SELECT 'DEV_TEMPLATE_HANDLEBARS_HEADER' as x__id, 
                        'DEV_TEMPLATE_HANDLEBARS_HEADER' as template_part_id, 
                        utl_compress.lz_compress(temp_blob) as content
                        FROM DUAL
                      ) x
                ON (t.x__id = x.x__id)
                WHEN MATCHED THEN
                    UPDATE SET t.template_part_id = x.template_part_id, t.content = x.content, t.compressed = 1, t.x__moddate = SYSDATE, t.x__moduser= 'SYSTEM',  
                        t.x__version = t.x__version + 1
                WHEN NOT MATCHED THEN
                    INSERT (x__id, template_part_id, content, compressed, validity_start, validity_end, x__insdate, x__insuser, x__moddate, x__moduser,                    x__version)                     
                    VALUES (x.x__id, x.template_part_id, x.content, 1, SYSDATE, null, SYSDATE, 'SYSTEM', NULL, NULL, 1);
            END;
            /
        </sql>
        <sql dbms="oracle"
            endDelimiter="/"
            splitStatements="true"
            stripComments="true">
            <!-- ****** -->
            DECLARE
                temp_blob BLOB := EMPTY_BLOB;            
            BEGIN            
                dbms_lob.createtemporary(temp_blob, TRUE);
                dbms_lob.open(temp_blob, dbms_lob.lob_readwrite);               
                dbms_lob.append(temp_blob, utl_raw.cast_to_raw(q&apos;^{{#personList}}&lt;tr&gt;&lt;td&gt;{{name}}&lt;/td&gt;&lt;td&gt;{{age}}{{#if (equals age "0")}} (infant){{/if}}&lt;/td&gt;&lt;/tr&gt;{{/personList}}^&apos;));              
                
                dbms_lob.close(temp_blob);     
                
                MERGE INTO ${schema_name}.template_part_content t
                USING (SELECT 'DEV_TEMPLATE_HANDLEBARS_ROW' as x__id, 
                        'DEV_TEMPLATE_HANDLEBARS_ROW' as template_part_id, 
                        utl_compress.lz_compress(temp_blob) as content
                        FROM DUAL
                      ) x
                ON (t.x__id = x.x__id)
                WHEN MATCHED THEN
                    UPDATE SET t.template_part_id = x.template_part_id, t.content = x.content, t.compressed = 1, t.x__moddate = SYSDATE, t.x__moduser= 'SYSTEM',  
                        t.x__version = t.x__version + 1
                WHEN NOT MATCHED THEN
                    INSERT (x__id, template_part_id, content, compressed, validity_start, validity_end, x__insdate, x__insuser, x__moddate, x__moduser,                    x__version)                     
                    VALUES (x.x__id, x.template_part_id, x.content, 1, SYSDATE, null, SYSDATE, 'SYSTEM', NULL, NULL, 1);
            END;
            /
        </sql>
        <sql dbms="oracle"
            endDelimiter="/"
            splitStatements="true"
            stripComments="true">
            <!-- ****** -->
            DECLARE
                temp_blob BLOB := EMPTY_BLOB;            
            BEGIN            
                dbms_lob.createtemporary(temp_blob, TRUE);
                dbms_lob.open(temp_blob, dbms_lob.lob_readwrite);               
                dbms_lob.append(temp_blob, utl_raw.cast_to_raw(q&apos;^&lt;div class="footer"&gt;&#169; {{currentYear}}&lt;/div&gt;^&apos;));              
                
                dbms_lob.close(temp_blob);     
                
                MERGE INTO ${schema_name}.template_part_content t
                USING (SELECT 'DEV_TEMPLATE_HANDLEBARS_FOOTER' as x__id, 
                        'DEV_TEMPLATE_HANDLEBARS_FOOTER' as template_part_id, 
                        utl_compress.lz_compress(temp_blob) as content
                        FROM DUAL
                      ) x
                ON (t.x__id = x.x__id)
                WHEN MATCHED THEN
                    UPDATE SET t.template_part_id = x.template_part_id, t.content = x.content, t.compressed = 1, t.x__moddate = SYSDATE, t.x__moduser= 'SYSTEM',  
                        t.x__version = t.x__version + 1
                WHEN NOT MATCHED THEN
                    INSERT (x__id, template_part_id, content, compressed, validity_start, validity_end, x__insdate, x__insuser, x__moddate, x__moduser,                    x__version)                     
                    VALUES (x.x__id, x.template_part_id, x.content, 1, SYSDATE, null, SYSDATE, 'SYSTEM', NULL, NULL, 1);
            END;
            /
        </sql>
        <sql dbms="oracle"
            endDelimiter="/"
            splitStatements="true"
            stripComments="true">
            <!-- ****** -->
            DECLARE
                temp_blob BLOB := EMPTY_BLOB;            
            BEGIN            
                dbms_lob.createtemporary(temp_blob, TRUE);
                dbms_lob.open(temp_blob, dbms_lob.lob_readwrite);               
                dbms_lob.append(temp_blob, utl_raw.cast_to_raw(q&apos;&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;style&gt;html, body { width:180mm;height: 297mm;font-family: Arial;font-size: 10px;}table { page-break-inside:auto }tr{ page-break-inside:avoid; page-break-after:auto}thead{display:table-header-group }tfoot { display:table-footer-group }}table {  margin-bottom: 20px;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;table style="height: 161px; width: 100%; border-collapse: collapse;" border="0"&gt;&lt;tbody&gt;&lt;tr style="height: 161px;"&gt;&lt;td style="width: 161px;"&gt;&apos;));              
                
                dbms_lob.close(temp_blob);     
                
                MERGE INTO ${schema_name}.template_part_content t
                USING (SELECT 'DEV_TEMPLATE_ERROR_MAIN' as x__id, 
                        'DEV_TEMPLATE_ERROR_MAIN' as template_part_id, 
                        utl_compress.lz_compress(temp_blob) as content
                        FROM DUAL
                      ) x
                ON (t.x__id = x.x__id)
                WHEN MATCHED THEN
                    UPDATE SET t.template_part_id = x.template_part_id, t.content = x.content, t.compressed = 1, t.x__moddate = SYSDATE, t.x__moduser= 'SYSTEM',  
                        t.x__version = t.x__version + 1
                WHEN NOT MATCHED THEN
                    INSERT (x__id, template_part_id, content, compressed, validity_start, validity_end, x__insdate, x__insuser, x__moddate, x__moduser,                    x__version)                     
                    VALUES (x.x__id, x.template_part_id, x.content, 1, SYSDATE, null, SYSDATE, 'SYSTEM', NULL, NULL, 1);
            END;
            /
        </sql>

    </changeSet>
</databaseChangeLog>